{"version":3,"sources":["../../../src/services/hosts/plugin.js"],"names":["AbstractService","Joi","require","_","HostsPlugin","constructor","register","box","onCli","program","command","action","service","discover","showHosts","rootService","hosts","serviceName","services","isEmpty","expose","first","push","ip","name","port","console","log","join","module","exports"],"mappings":";;;;;;;;AAAA,MAAM,EAACA,eAAD,EAAkBC,GAAlB,KAAyBC,QAAQ,sBAAR,CAA/B;AACA,MAAMC,IAAID,QAAQ,QAAR,CAAV;;AAEA,MAAME,WAAN,SAA0BJ,eAA1B,CAA0C;AACxCK,gBAAc;AACZ;AACD;;AAEDC,WAASC,GAAT,EAAc;AACZ,SAAKA,GAAL,GAAWA,GAAX;AACD;;AAEDC,QAAMC,OAAN,EAAe;AAAA;;AACbA,YAAQC,OAAR,CAAgB,OAAhB,EAAyBC,MAAzB,iCAAgC,aAAY;AAC1C,YAAMC,UAAU,MAAM,MAAKL,GAAL,CAASM,QAAT,EAAtB;AACA,YAAKC,SAAL,CAAeF,OAAf;AACD,KAHD;AAID;;AAEDE,YAAUC,WAAV,EAAuB;AACrB,UAAMC,QAAQ,EAAd;AACA,SAAK,MAAMC,WAAX,IAA0BF,YAAYG,QAAtC,EAAgD;AAC9C,YAAMN,UAAUG,YAAYG,QAAZ,CAAqBD,WAArB,CAAhB;AACA,UAAId,EAAEgB,OAAF,CAAUP,QAAQQ,MAAlB,CAAJ,EAA+B;AAC7B;AACD;;AAED;AACA,YAAMA,SAASjB,EAAEkB,KAAF,CAAQT,QAAQQ,MAAhB,CAAf;;AAEAJ,YAAMM,IAAN,CAAY,GAAEF,OAAOG,EAAG,IAAGX,QAAQY,IAAK,MAAKZ,QAAQY,IAAK,IAAGJ,OAAOK,IAAK,oCAAmCb,QAAQY,IAAK,IAAGJ,OAAOG,EAAG,GAAtI;AACD;;AAEDG,YAAQC,GAAR,CAAYX,MAAMY,IAAN,CAAW,IAAX,CAAZ;AACD;AA/BuC;;AAkC1CC,OAAOC,OAAP,GAAiB1B,WAAjB","file":"plugin.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\r\nconst _ = require('lodash');\r\n\r\nclass HostsPlugin extends AbstractService {\r\n  constructor() {\r\n    super();\r\n  }\r\n\r\n  register(box) {\r\n    this.box = box;\r\n  }\r\n\r\n  onCli(program) {\r\n    program.command('hosts').action(async () => {\r\n      const service = await this.box.discover();\r\n      this.showHosts(service);\r\n    });\r\n  }\r\n\r\n  showHosts(rootService) {\r\n    const hosts = [];\r\n    for (const serviceName in rootService.services) {\r\n      const service = rootService.services[serviceName];\r\n      if (_.isEmpty(service.expose)) {\r\n        continue;\r\n      }\r\n        \r\n      //TODO we take first\r\n      const expose = _.first(service.expose);\r\n\r\n      hosts.push(`${expose.ip} ${service.name} # ${service.name}:${expose.port}, docker-compose extra_hosts: - \"${service.name}:${expose.ip}\"`);\r\n    }\r\n      \r\n    console.log(hosts.join(\"\\n\"));\r\n  }\r\n}\r\n\r\nmodule.exports = HostsPlugin;\r\n"]}