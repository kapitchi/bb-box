{"version":3,"sources":["../../../src/services/ssh/plugin.js"],"names":["AbstractService","Joi","require","_","shell","SshPlugin","constructor","register","box","onCli","program","onInstallBefore","params","_runIfEnabled","onUpdateBefore","onStatusBefore","onStartBefore","service","ctx","sshKeys","_ensureKeys","path","cwd","test","console","log","mkdir","files","errs","file","push","length","Error","join","chmod","sshKeysPath","getUserGroup","process","getgid","getuid","undefined","config","reset","fatal","module","exports"],"mappings":";;;;;;;;AAAA,MAAM,EAACA,eAAD,EAAkBC,GAAlB,KAAyBC,QAAQ,sBAAR,CAA/B;AACA,MAAMC,IAAID,QAAQ,QAAR,CAAV;AACA,MAAME,QAAQF,QAAQ,SAAR,CAAd;;AAEA,MAAMG,SAAN,SAAwBL,eAAxB,CAAwC;AACtCM,gBAAc;AACZ;AACD;;AAEDC,WAASC,GAAT,EAAc;AACZ,SAAKA,GAAL,GAAWA,GAAX;AACD;;AAEDC,QAAMC,OAAN,EAAe,CACd;;AAEKC,iBAAN,CAAsBC,MAAtB,EAA8B;AAAA;;AAAA;AAC5B,YAAM,MAAKC,aAAL,CAAmBD,MAAnB,CAAN;AAD4B;AAE7B;;AAEKE,gBAAN,CAAqBF,MAArB,EAA6B;AAAA;;AAAA;AAC3B,YAAM,OAAKC,aAAL,CAAmBD,MAAnB,CAAN;AAD2B;AAE5B;;AAEKG,gBAAN,CAAqBH,MAArB,EAA6B;AAAA;;AAAA;AAC3B,YAAM,OAAKC,aAAL,CAAmBD,MAAnB,CAAN;AAD2B;AAE5B;;AAEKI,eAAN,CAAoBJ,MAApB,EAA4B;AAAA;;AAAA;AAC1B,YAAM,OAAKC,aAAL,CAAmBD,MAAnB,CAAN;AAD0B;AAE3B;;AAEKC,eAAN,CAAoB,EAACI,OAAD,EAAUC,GAAV,EAApB,EAAoC;AAAA;;AAAA;AAClC,UAAI,CAACD,QAAQE,OAAb,EAAsB;AACpB;AACD;;AAED,YAAM,OAAKC,WAAL,CAAiBH,OAAjB,EAA0BC,GAA1B,CAAN;AALkC;AAMnC;;AAEKE,aAAN,CAAkBH,OAAlB,EAA2BC,GAA3B,EAAgC;AAAA;;AAAA;AAC9B,YAAMG,OAAQ,GAAEJ,QAAQK,GAAI,iBAA5B;AACA,UAAI,CAAC,OAAKlB,KAAL,CAAWmB,IAAX,CAAgB,IAAhB,EAAsBF,IAAtB,CAAL,EAAkC;AAChCG,gBAAQC,GAAR,CAAa,qCAAoCJ,IAAK,EAAtD,EADgC,CAC0B;AAC1D,eAAKjB,KAAL,CAAWsB,KAAX,CAAiB,IAAjB,EAAuBL,IAAvB;AACD;;AAED,YAAMM,QAAQ,CAAC,QAAD,EAAW,aAAX,EAA0B,YAA1B,CAAd;AACA,YAAMC,OAAO,EAAb;AACA,WAAK,MAAMC,IAAX,IAAmBF,KAAnB,EAA0B;AACxB,YAAI,CAAC,OAAKvB,KAAL,CAAWmB,IAAX,CAAgB,IAAhB,EAAuB,GAAEF,IAAK,IAAGQ,IAAK,EAAtC,CAAL,EAA+C;AAC7CD,eAAKE,IAAL,CAAUD,IAAV;AACD;AACF;;AAED,UAAID,KAAKG,MAAT,EAAiB;AACf,cAAM,IAAIC,KAAJ,CAAU,wBAAwBJ,KAAKK,IAAL,CAAU,IAAV,CAAlC,CAAN;AACD;;AAED;AACA,aAAK7B,KAAL,CAAW8B,KAAX,CAAiB,IAAjB,EAAuB,KAAvB,EAA+B,GAAEb,IAAK,SAAtC;AACA,aAAKjB,KAAL,CAAW8B,KAAX,CAAiB,IAAjB,EAAuB,KAAvB,EAA+B,GAAEb,IAAK,aAAtC;;AAEAH,UAAIiB,WAAJ,GAAkBd,IAAlB;AAvB8B;AAwB/B;;AAED;;;;;;;AAOAe,iBAAe;AACb,QAAIC,QAAQC,MAAR,IAAkBD,QAAQE,MAA9B,EAAsC;AACpC,aAAQ,GAAEF,QAAQE,MAAR,EAAiB,IAAGF,QAAQC,MAAR,EAAiB,EAA/C;AACD;AACD,WAAOE,SAAP;AACD;;AAED,MAAIpC,KAAJ,GAAY;AACVA,UAAMqC,MAAN,CAAaC,KAAb;AACAtC,UAAMqC,MAAN,CAAaE,KAAb,GAAqB,IAArB;;AAEA,WAAOvC,KAAP;AACD;AAjFqC;;AAoFxCwC,OAAOC,OAAP,GAAiBxC,SAAjB","file":"plugin.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\nconst _ = require('lodash');\nconst shell = require('shelljs');\n\nclass SshPlugin extends AbstractService {\n  constructor() {\n    super();\n  }\n\n  register(box) {\n    this.box = box;\n  }\n\n  onCli(program) {\n  }\n\n  async onInstallBefore(params) {\n    await this._runIfEnabled(params);\n  }\n\n  async onUpdateBefore(params) {\n    await this._runIfEnabled(params);\n  }\n\n  async onStatusBefore(params) {\n    await this._runIfEnabled(params);\n  }\n\n  async onStartBefore(params) {\n    await this._runIfEnabled(params);\n  }\n\n  async _runIfEnabled({service, ctx}) {\n    if (!service.sshKeys) {\n      return;\n    }\n\n    await this._ensureKeys(service, ctx);\n  }\n\n  async _ensureKeys(service, ctx) {\n    const path = `${service.cwd}/.bbox/ssh-keys`;\n    if (!this.shell.test('-d', path)) {\n      console.log(`Creating the folder for SSH keys: ${path}`); //XXX\n      this.shell.mkdir('-p', path);\n    }\n\n    const files = ['id_rsa', 'known_hosts', 'id_rsa.pub'];\n    const errs = [];\n    for (const file of files) {\n      if (!this.shell.test('-f', `${path}/${file}`)) {\n        errs.push(file);\n      }\n    }\n\n    if (errs.length) {\n      throw new Error('SSH files missing: ' + errs.join(', '));\n    }\n\n    //this.shell.exec(`docker run ${args.join(' ')} -v ${path}:/sshkey madhub/ssh-keygen`);\n    this.shell.chmod('-R', '600', `${path}/id_rsa`);\n    this.shell.chmod('-R', '600', `${path}/id_rsa.pub`);\n\n    ctx.sshKeysPath = path;\n  }\n\n  /**\n   * Get \"user:group\" of current process\n   *\n   * Window: process.getgid() and process.getuid() are not defined so this returns null\n   *\n   * @returns {null|string}\n   */\n  getUserGroup() {\n    if (process.getgid && process.getuid) {\n      return `${process.getuid()}:${process.getgid()}`;\n    }\n    return undefined;\n  }\n\n  get shell() {\n    shell.config.reset();\n    shell.config.fatal = true;\n\n    return shell;\n  }\n}\n\nmodule.exports = SshPlugin;\n"]}