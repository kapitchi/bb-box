{"version":3,"sources":["../../../src/services/docker-compose/plugin.js"],"names":["AbstractService","Joi","require","YAML","_","DockerComposePlugin","constructor","dockerComposeRuntime","dockerDiscovery","runtime","register","box","runtimes","onCli","program","discoverServices","host","getHost","compose","load","ret","serviceName","services","service","def","omitBy","name","dockerCompose","dependsOn","depends_on","isUndefined","ports","expose","map","port","parsePorts","ip","localService","build","disableOps","install","update","reset","e","code","split","length","container","Error","module","exports"],"mappings":";;AAAA,MAAM,EAACA,eAAD,EAAkBC,GAAlB,KAAyBC,QAAQ,sBAAR,CAA/B;AACA,MAAMC,OAAOD,QAAQ,QAAR,CAAb;AACA,MAAME,IAAIF,QAAQ,QAAR,CAAV;;AAEA,MAAMG,mBAAN,SAAkCL,eAAlC,CAAkD;AAChDM,cAAYC,oBAAZ,EAAkCC,eAAlC,EAAmD;AACjD;AACA,SAAKC,OAAL,GAAeF,oBAAf;AACA,SAAKC,eAAL,GAAuBA,eAAvB;AACD;;AAEDE,WAASC,GAAT,EAAc;AACZA,QAAIC,QAAJ,CAAa,gBAAb,IAAiC,KAAKH,OAAtC;AACD;;AAEDI,QAAMC,OAAN,EAAe,CACd;;AAEDC,qBAAmB;AACjB,QAAI;AACF,YAAMC,OAAO,KAAKR,eAAL,CAAqBS,OAArB,EAAb;;AAEA,YAAMC,UAAUf,KAAKgB,IAAL,CAAU,oBAAV,CAAhB;AACA,YAAMC,MAAM,EAAZ;AACA,WAAK,MAAMC,WAAX,IAA0BH,QAAQI,QAAlC,EAA4C;AAC1C,cAAMC,UAAUL,QAAQI,QAAR,CAAiBD,WAAjB,CAAhB;;AAEA,cAAMG,MAAMpB,EAAEqB,MAAF,CAAS;AACnBC,gBAAML,WADa;AAEnBM,yBAAe;AACbJ,qBAASF;AADI,WAFI;AAKnBZ,mBAAS,gBALU;AAMnBmB,qBAAWL,QAAQM;AANA,SAAT,EAOTzB,EAAE0B,WAPO,CAAZ;;AASA,YAAIP,QAAQQ,KAAZ,EAAmB;AACjBP,cAAIQ,MAAJ,GAAaT,QAAQQ,KAAR,CAAcE,GAAd,CAAkBC,QAAQ;AACrC,kBAAMH,QAAQ,KAAKI,UAAL,CAAgBD,IAAhB,CAAd;AACA,mBAAO;AACLlB,oBAAMA,KAAKoB,EADN;AAELF,oBAAMH,MAAMf;AAFP,aAAP;AAID,WANY,CAAb;AAOD;;AAED,cAAMqB,eAAe,CAAC,CAACd,QAAQe,KAA/B;AACA,YAAI,CAACD,YAAL,EAAmB;AACjBb,cAAIe,UAAJ,GAAiB;AACfC,qBAAS,IADM;AAEfC,oBAAQ,IAFO;AAGfC,mBAAO;AAHQ,WAAjB;AAKD;;AAEDtB,YAAIC,WAAJ,IAAmBG,GAAnB;AACD;;AAED,aAAOJ,GAAP;AACD,KAxCD,CAwCE,OAAMuB,CAAN,EAAS;AACT,UAAIA,EAAEC,IAAF,KAAW,QAAf,EAAyB;AACvB,cAAMD,CAAN;AACD;AACD,aAAO,EAAP;AACD;AACF;;AAEDR,aAAWD,IAAX,EAAiB;AACf,UAAMH,QAAQG,KAAKW,KAAL,CAAW,GAAX,CAAd;AACA,QAAId,MAAMe,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAO;AACL9B,cAAMe,MAAM,CAAN,CADD;AAELgB,mBAAWhB,MAAM,CAAN;AAFN,OAAP;AAID;;AAED,QAAIA,MAAMe,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAO;AACL9B,cAAMe,MAAM,CAAN,CADD;AAELgB,mBAAWhB,MAAM,CAAN;AAFN,OAAP;AAID;;AAED,UAAM,IAAIiB,KAAJ,CAAU,0BAA0Bd,IAApC,CAAN;AACD;AAhF+C;;AAmFlDe,OAAOC,OAAP,GAAiB7C,mBAAjB","file":"plugin.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\r\nconst YAML = require('yamljs');\r\nconst _ = require('lodash');\r\n\r\nclass DockerComposePlugin extends AbstractService {\r\n  constructor(dockerComposeRuntime, dockerDiscovery) {\r\n    super();\r\n    this.runtime = dockerComposeRuntime;\r\n    this.dockerDiscovery = dockerDiscovery;\r\n  }\r\n\r\n  register(box) {\r\n    box.runtimes['docker-compose'] = this.runtime;\r\n  }\r\n\r\n  onCli(program) {\r\n  }\r\n\r\n  discoverServices() {\r\n    try {\r\n      const host = this.dockerDiscovery.getHost();\r\n        \r\n      const compose = YAML.load('docker-compose.yml');\r\n      const ret = {};\r\n      for (const serviceName in compose.services) {\r\n        const service = compose.services[serviceName];\r\n\r\n        const def = _.omitBy({\r\n          name: serviceName,\r\n          dockerCompose: {\r\n            service: serviceName\r\n          },\r\n          runtime: 'docker-compose',\r\n          dependsOn: service.depends_on\r\n        }, _.isUndefined);\r\n\r\n        if (service.ports) {\r\n          def.expose = service.ports.map(port => {\r\n            const ports = this.parsePorts(port);\r\n            return {\r\n              host: host.ip,\r\n              port: ports.host\r\n            }\r\n          });\r\n        }\r\n\r\n        const localService = !!service.build;\r\n        if (!localService) {\r\n          def.disableOps = {\r\n            install: true,\r\n            update: true,\r\n            reset: true\r\n          };\r\n        }\r\n\r\n        ret[serviceName] = def;\r\n      }\r\n\r\n      return ret;\r\n    } catch(e) {\r\n      if (e.code !== 'ENOENT') {\r\n        throw e;\r\n      }\r\n      return {};\r\n    }\r\n  }\r\n\r\n  parsePorts(port) {\r\n    const ports = port.split(':');\r\n    if (ports.length === 2) {\r\n      return {\r\n        host: ports[0],\r\n        container: ports[1]\r\n      };\r\n    }\r\n\r\n    if (ports.length === 1) {\r\n      return {\r\n        host: ports[0],\r\n        container: ports[0]\r\n      };\r\n    }\r\n\r\n    throw new Error('Unknown port format: ' + port);\r\n  }\r\n}\r\n\r\nmodule.exports = DockerComposePlugin;\r\n"]}