{"version":3,"sources":["../../../src/services/docker-compose/plugin.js"],"names":["AbstractService","Joi","require","YAML","_","DockerComposePlugin","constructor","dockerComposeRuntime","runtime","register","box","runtimes","onCli","program","discoverServices","compose","load","ret","serviceName","services","service","def","omitBy","name","dockerCompose","dependsOn","depends_on","isUndefined","ports","expose","map","port","parsePorts","host","localService","build","disableOps","install","update","reset","e","code","split","length","container","Error","module","exports"],"mappings":";;AAAA,MAAM,EAACA,eAAD,EAAkBC,GAAlB,KAAyBC,QAAQ,sBAAR,CAA/B;AACA,MAAMC,OAAOD,QAAQ,QAAR,CAAb;AACA,MAAME,IAAIF,QAAQ,QAAR,CAAV;;AAEA,MAAMG,mBAAN,SAAkCL,eAAlC,CAAkD;AAChDM,cAAYC,oBAAZ,EAAkC;AAChC;AACA,SAAKC,OAAL,GAAeD,oBAAf;AACD;;AAEDE,WAASC,GAAT,EAAc;AACZA,QAAIC,QAAJ,CAAa,gBAAb,IAAiC,KAAKH,OAAtC;AACD;;AAEDI,QAAMC,OAAN,EAAe,CACd;;AAEDC,qBAAmB;AACjB,QAAI;AACF,YAAMC,UAAUZ,KAAKa,IAAL,CAAU,oBAAV,CAAhB;AACA,YAAMC,MAAM,EAAZ;AACA,WAAK,MAAMC,WAAX,IAA0BH,QAAQI,QAAlC,EAA4C;AAC1C,cAAMC,UAAUL,QAAQI,QAAR,CAAiBD,WAAjB,CAAhB;;AAEA,cAAMG,MAAMjB,EAAEkB,MAAF,CAAS;AACnBC,gBAAML,WADa;AAEnBM,yBAAe;AACbJ,qBAASF;AADI,WAFI;AAKnBV,mBAAS,gBALU;AAMnBiB,qBAAWL,QAAQM;AANA,SAAT,EAOTtB,EAAEuB,WAPO,CAAZ;;AASA,YAAIP,QAAQQ,KAAZ,EAAmB;AACjBP,cAAIQ,MAAJ,GAAaT,QAAQQ,KAAR,CAAcE,GAAd,CAAkBC,QAAQ;AACrC,kBAAMH,QAAQ,KAAKI,UAAL,CAAgBD,IAAhB,CAAd;AACA,mBAAO;AACLE,oBAAM,WADD;AAELF,oBAAMH,MAAMK;AAFP,aAAP;AAID,WANY,CAAb;AAOD;;AAED,cAAMC,eAAe,CAAC,CAACd,QAAQe,KAA/B;AACA,YAAI,CAACD,YAAL,EAAmB;AACjBb,cAAIe,UAAJ,GAAiB;AACfC,qBAAS,IADM;AAEfC,oBAAQ,IAFO;AAGfC,mBAAO;AAHQ,WAAjB;AAKD;;AAEDtB,YAAIC,WAAJ,IAAmBG,GAAnB;AACD;;AAED,aAAOJ,GAAP;AACD,KAtCD,CAsCE,OAAMuB,CAAN,EAAS;AACT,UAAIA,EAAEC,IAAF,KAAW,QAAf,EAAyB;AACvB,cAAMD,CAAN;AACD;AACD,aAAO,EAAP;AACD;AACF;;AAEDR,aAAWD,IAAX,EAAiB;AACf,UAAMH,QAAQG,KAAKW,KAAL,CAAW,GAAX,CAAd;AACA,QAAId,MAAMe,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAO;AACLV,cAAML,MAAM,CAAN,CADD;AAELgB,mBAAWhB,MAAM,CAAN;AAFN,OAAP;AAID;;AAED,QAAIA,MAAMe,MAAN,KAAiB,CAArB,EAAwB;AACtB,aAAO;AACLV,cAAML,MAAM,CAAN,CADD;AAELgB,mBAAWhB,MAAM,CAAN;AAFN,OAAP;AAID;;AAED,UAAM,IAAIiB,KAAJ,CAAU,0BAA0Bd,IAApC,CAAN;AACD;AA7E+C;;AAgFlDe,OAAOC,OAAP,GAAiB1C,mBAAjB","file":"plugin.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\nconst YAML = require('yamljs');\nconst _ = require('lodash');\n\nclass DockerComposePlugin extends AbstractService {\n  constructor(dockerComposeRuntime) {\n    super();\n    this.runtime = dockerComposeRuntime;\n  }\n\n  register(box) {\n    box.runtimes['docker-compose'] = this.runtime;\n  }\n\n  onCli(program) {\n  }\n\n  discoverServices() {\n    try {\n      const compose = YAML.load('docker-compose.yml');\n      const ret = {};\n      for (const serviceName in compose.services) {\n        const service = compose.services[serviceName];\n\n        const def = _.omitBy({\n          name: serviceName,\n          dockerCompose: {\n            service: serviceName\n          },\n          runtime: 'docker-compose',\n          dependsOn: service.depends_on\n        }, _.isUndefined);\n\n        if (service.ports) {\n          def.expose = service.ports.map(port => {\n            const ports = this.parsePorts(port);\n            return {\n              host: 'localhost',\n              port: ports.host\n            }\n          });\n        }\n\n        const localService = !!service.build;\n        if (!localService) {\n          def.disableOps = {\n            install: true,\n            update: true,\n            reset: true\n          };\n        }\n\n        ret[serviceName] = def;\n      }\n\n      return ret;\n    } catch(e) {\n      if (e.code !== 'ENOENT') {\n        throw e;\n      }\n      return {};\n    }\n  }\n\n  parsePorts(port) {\n    const ports = port.split(':');\n    if (ports.length === 2) {\n      return {\n        host: ports[0],\n        container: ports[1]\n      };\n    }\n\n    if (ports.length === 1) {\n      return {\n        host: ports[0],\n        container: ports[0]\n      };\n    }\n\n    throw new Error('Unknown port format: ' + port);\n  }\n}\n\nmodule.exports = DockerComposePlugin;\n"]}