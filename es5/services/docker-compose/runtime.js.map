{"version":3,"sources":["../../../src/services/docker-compose/runtime.js"],"names":["AbstractService","Joi","require","_","shell","spawnSync","DockerComposeRuntime","constructor","docker","exec","silent","run","params","service","object","op","string","serviceName","dockerCompose","cmd","getStatus","args","userGroup","getUserGroup","push","each","env","val","key","logger","log","level","msg","spawn","status","Error","containers","listContainers","all","container","find","cnt","Labels","State","undefined","process","getgid","getuid","opts","defaults","BOX_USER","ret","stdio","console","error","config","reset","fatal","module","exports"],"mappings":";;;;;;;;AAAA,MAAM,EAACA,eAAD,EAAkBC,GAAlB,KAAyBC,QAAQ,sBAAR,CAA/B;AACA,MAAMC,IAAID,QAAQ,QAAR,CAAV;AACA,MAAME,QAAQF,QAAQ,SAAR,CAAd;AACA,MAAM,EAAEG,SAAF,KAAgBH,QAAQ,eAAR,CAAtB;;AAEA,MAAMI,oBAAN,SAAmCN,eAAnC,CAAmD;AACjDO,cAAYC,MAAZ,EAAoB;AAClB;;AAEA;AACA,SAAKJ,KAAL,CAAWK,IAAX,CAAgB,0BAAhB,EAA4C,EAACC,QAAQ,IAAT,EAA5C;;AAEA,SAAKF,MAAL,GAAcA,MAAd;AACD;;AAEKG,KAAN,CAAUC,MAAV,EAAkB;AAAA;;AAAA;AAChB,YAAKA,MAAL,CAAYA,MAAZ,EAAoB;AAClBC,iBAASZ,IAAIa,MAAJ,EADS;AAElBC,YAAId,IAAIe,MAAJ;AAFc,OAApB;;AAKA;AACA,YAAM,EAACH,OAAD,EAAUE,EAAV,KAAgBH,MAAtB;;AAEA,YAAMK,cAAcJ,QAAQK,aAAR,CAAsBL,OAA1C;;AAEA,cAAOE,EAAP;AACE,aAAK,SAAL;AACA,aAAK,QAAL;AACA,aAAK,OAAL;AACE,cAAII,MAAM,KAAV;AACA,cAAI,OAAM,MAAKC,SAAL,CAAeH,WAAf,CAAN,MAAsC,SAA1C,EAAqD;AACnDE,kBAAM,MAAN;AACD;;AAED,gBAAME,OAAO,EAAb;;AAEA,gBAAMC,YAAY,MAAKC,YAAL,EAAlB;AACA,cAAID,SAAJ,EAAe;AACbD,iBAAKG,IAAL,CAAW,UAASF,SAAU,EAA9B;AACD;;AAED,cAAIH,QAAQ,KAAZ,EAAmB;AACjBE,iBAAKG,IAAL,CAAU,MAAV;AACA;AACArB,cAAEsB,IAAF,CAAOZ,QAAQa,GAAf,EAAoB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAChCP,mBAAKG,IAAL,CAAW,MAAKI,GAAI,IAAGD,GAAI,EAA3B;AACD,aAFD;AAGD;;AAED,gBAAKE,MAAL,CAAYC,GAAZ,CAAgB;AACdC,mBAAO,MADO;AAEdC,iBAAM,GAAEf,WAAY,6BAA4BE,GAAI,WAAUF,WAAY,WAAUF,EAAG;AAFzE,WAAhB;;AAKA,gBAAKkB,KAAL,CAAW,gBAAX,EAA6B,CAACd,GAAD,EAAM,GAAGE,IAAT,EAAeJ,WAAf,EAA4B,QAA5B,EAAsCF,EAAtC,CAA7B,EAAwE;AACtEW,iBAAKb,QAAQa;AADyD,WAAxE;;AAIA,gBAAKG,MAAL,CAAYC,GAAZ,CAAgB;AACdC,mBAAO,MADO;AAEdC,iBAAM,GAAEf,WAAY;AAFN,WAAhB;AAIA;AACF,aAAK,OAAL;AACE,gBAAKgB,KAAL,CAAW,gBAAX,EAA6B,CAAC,IAAD,EAAO,IAAP,EAAahB,WAAb,CAA7B,EAAwD;AACtDS,iBAAKb,QAAQa;AADyC,WAAxD;AAGA;AACF,aAAK,MAAL;AACE,gBAAKO,KAAL,CAAW,gBAAX,EAA6B,CAAC,MAAD,EAAShB,WAAT,CAA7B,EAAoD;AAClDS,iBAAKb,QAAQa;AADqC,WAApD;AAGA;AACF,aAAK,QAAL;AACEb,kBAAQqB,MAAR,GAAiB,MAAM,MAAKd,SAAL,CAAeH,WAAf,CAAvB;AACA;AACF;AACE,gBAAM,IAAIkB,KAAJ,CAAU,kDAAkDpB,EAA5D,CAAN;AApDJ;AAXgB;AAiEjB;;AAEKK,WAAN,CAAgBH,WAAhB,EAA6B;AAAA;;AAAA;AAC3B,YAAMmB,aAAa,MAAM,OAAK5B,MAAL,CAAY6B,cAAZ,CAA2B;AAClDC,aAAK;AAD6C,OAA3B,CAAzB;AAGA,YAAMC,YAAYpC,EAAEqC,IAAF,CAAOJ,UAAP,EAAmB,UAACK,GAAD,EAAS;AAC5C,eAAOA,IAAIC,MAAJ,CAAW,4BAAX,MAA6CzB,WAApD;AACD,OAFiB,CAAlB;AAGA,UAAIsB,SAAJ,EAAe;AACb,eAAOA,UAAUI,KAAjB;AACD;AACD,aAAOC,SAAP;AAV2B;AAW5B;;AAED;;;;;;;AAOArB,iBAAe;AACb,QAAIsB,QAAQC,MAAR,IAAkBD,QAAQE,MAA9B,EAAsC;AACpC,aAAQ,GAAEF,QAAQE,MAAR,EAAiB,IAAGF,QAAQC,MAAR,EAAiB,EAA/C;AACD;AACD,WAAOF,SAAP;AACD;;AAEDX,QAAMd,GAAN,EAAWE,IAAX,EAAiB2B,IAAjB,EAAuB;AACrB;AACA,UAAMtB,MAAMvB,EAAE8C,QAAF,CAAW;AACrBC,gBAAU,KAAK3B,YAAL;AADW,KAAX,EAETyB,KAAKtB,GAFI,EAECmB,QAAQnB,GAFT,CAAZ;AAGA,UAAMyB,MAAM9C,UAAUc,GAAV,EAAeE,IAAf,EAAqBlB,EAAE8C,QAAF,CAAW;AAC1CvB,SAD0C;AAE1C0B,aAAO,SAFmC;AAG1ChD,aAAO;AAHmC,KAAX,EAI9B4C,IAJ8B,CAArB,CAAZ;AAKA,QAAIG,IAAIjB,MAAJ,KAAe,CAAnB,EAAsB;AACpBmB,cAAQC,KAAR,CAAcH,GAAd,EADoB,CACA;AACpB,YAAM,IAAIhB,KAAJ,CAAU,aAAV,CAAN;AACD;AACF;;AAED,MAAI/B,KAAJ,GAAY;AACVA,UAAMmD,MAAN,CAAaC,KAAb;AACApD,UAAMmD,MAAN,CAAa7C,MAAb,GAAsB,IAAtB;AACAN,UAAMmD,MAAN,CAAaE,KAAb,GAAqB,IAArB;;AAEA,WAAOrD,KAAP;AACD;AA9HgD;;AAiInDsD,OAAOC,OAAP,GAAiBrD,oBAAjB","file":"runtime.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\nconst _ = require('lodash');\nconst shell = require('shelljs');\nconst { spawnSync } = require('child_process');\n\nclass DockerComposeRuntime extends AbstractService {\n  constructor(docker) {\n    super();\n\n    //check if docker-compose is available on local system\n    this.shell.exec('docker-compose --version', {silent: true});\n\n    this.docker = docker;\n  }\n\n  async run(params) {\n    this.params(params, {\n      service: Joi.object(),\n      op: Joi.string()\n    });\n\n    //we don't do `params = this.params(...)` as we want original reference of the service\n    const {service, op} = params;\n\n    const serviceName = service.dockerCompose.service;\n\n    switch(op) {\n      case 'install':\n      case 'update':\n      case 'reset':\n        let cmd = 'run';\n        if (await this.getStatus(serviceName) === 'running') {\n          cmd = 'exec';\n        }\n\n        const args = [];\n\n        const userGroup = this.getUserGroup();\n        if (userGroup) {\n          args.push(`--user ${userGroup}`);\n        }\n\n        if (cmd === 'run') {\n          args.push('--rm');\n          //TODO escape val?\n          _.each(service.env, (val, key) => {\n            args.push(`-e ${key}=${val}`);\n          });\n        }\n\n        this.logger.log({\n          level: 'info',\n          msg: `${serviceName}: RUNNING 'docker-compose ${cmd} <args> ${serviceName} bb-box ${op}. The below runs on the container:`\n        });\n\n        this.spawn('docker-compose', [cmd, ...args, serviceName, 'bb-box', op], {\n          env: service.env\n        });\n\n        this.logger.log({\n          level: 'info',\n          msg: `${serviceName}: END`\n        });\n        break;\n      case 'start':\n        this.spawn('docker-compose', ['up', '-d', serviceName], {\n          env: service.env\n        });\n        break;\n      case 'stop':\n        this.spawn('docker-compose', ['stop', serviceName], {\n          env: service.env\n        });\n        break;\n      case 'status':\n        service.status = await this.getStatus(serviceName);\n        break;\n      default:\n        throw new Error('DockerComposePlugin: Not supported operation ' + op);\n    }\n  }\n\n  async getStatus(serviceName) {\n    const containers = await this.docker.listContainers({\n      all: 1\n    });\n    const container = _.find(containers, (cnt) => {\n      return cnt.Labels['com.docker.compose.service'] === serviceName;\n    });\n    if (container) {\n      return container.State;\n    }\n    return undefined;\n  }\n\n  /**\n   * Get \"user:group\" of current process\n   *\n   * Window: process.getgid() and process.getuid() are not defined so this returns null\n   *\n   * @returns {null|string}\n   */\n  getUserGroup() {\n    if (process.getgid && process.getuid) {\n      return `${process.getuid()}:${process.getgid()}`;\n    }\n    return undefined;\n  }\n\n  spawn(cmd, args, opts) {\n    //merge current process env with spawn cmd\n    const env = _.defaults({\n      BOX_USER: this.getUserGroup()\n    }, opts.env, process.env);\n    const ret = spawnSync(cmd, args, _.defaults({\n      env,\n      stdio: 'inherit',\n      shell: true\n    }, opts));\n    if (ret.status !== 0) {\n      console.error(ret); //XXX\n      throw new Error('spawn error');\n    }\n  }\n\n  get shell() {\n    shell.config.reset();\n    shell.config.silent = true;\n    shell.config.fatal = true;\n\n    return shell;\n  }\n}\n\nmodule.exports = DockerComposeRuntime;\n"]}