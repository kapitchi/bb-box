{"version":3,"sources":["../../../src/services/docker-compose/runtime.js"],"names":["AbstractService","Joi","require","_","shell","spawnSync","DockerComposeRuntime","constructor","docker","exec","silent","windowsHide","run","params","service","object","op","string","serviceName","dockerCompose","cmd","getStatus","args","userGroup","getUserGroup","console","log","push","each","env","val","key","logger","level","msg","spawn","status","Error","containers","listContainers","all","container","find","cnt","Labels","State","undefined","process","getgid","getuid","opts","defaults","BOX_USER","ret","stdio","error","config","reset","fatal","module","exports"],"mappings":"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","file":"runtime.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\r\nconst _ = require('lodash');\r\nconst shell = require('shelljs');\r\nconst { spawnSync } = require('child_process');\r\n\r\nclass DockerComposeRuntime extends AbstractService {\r\n  constructor(docker) {\r\n    super();\r\n\r\n    //check if docker-compose is available on local system\r\n    this.shell.exec('docker-compose --version', {silent: true, windowsHide: true});\r\n\r\n    this.docker = docker;\r\n  }\r\n\r\n  async run(params) {\r\n    this.params(params, {\r\n      service: Joi.object(),\r\n      op: Joi.string()\r\n    });\r\n\r\n    //we don't do `params = this.params(...)` as we want original reference of the service\r\n    const {service, op} = params;\r\n\r\n    const serviceName = service.dockerCompose.service;\r\n\r\n    switch(op) {\r\n      case 'install':\r\n      case 'update':\r\n      case 'reset':\r\n        let cmd = 'run';\r\n        if (await this.getStatus(serviceName) === 'running') {\r\n          cmd = 'exec';\r\n        }\r\n\r\n        const args = [];\r\n\r\n        const userGroup = this.getUserGroup();\r\n        console.log(userGroup);\r\n        if (userGroup) {\r\n          args.push(`--user ${userGroup}`);\r\n        }\r\n\r\n        if (cmd === 'run') {\r\n          args.push('--rm');\r\n          //TODO escape val?\r\n          _.each(service.env, (val, key) => {\r\n            args.push(`-e ${key}=${val}`);\r\n          });\r\n        }\r\n\r\n        this.logger.log({\r\n          level: 'info',\r\n          msg: `${serviceName}: RUNNING 'docker-compose ${cmd} <args> ${serviceName} bbox ${op}. The below runs on the container:`\r\n        });\r\n\r\n        this.spawn('docker-compose', [cmd, ...args, serviceName, 'bbox', op], {\r\n          env: service.env\r\n        });\r\n\r\n        this.logger.log({\r\n          level: 'info',\r\n          msg: `${serviceName}: END`\r\n        });\r\n        break;\r\n      case 'start':\r\n        this.spawn('docker-compose', ['up', '-d', serviceName], {\r\n          env: service.env\r\n        });\r\n        break;\r\n      case 'stop':\r\n        this.spawn('docker-compose', ['stop', serviceName], {\r\n          env: service.env\r\n        });\r\n        break;\r\n      case 'status':\r\n        service.status = await this.getStatus(serviceName);\r\n        break;\r\n      default:\r\n        throw new Error('DockerComposePlugin: Not supported operation ' + op);\r\n    }\r\n  }\r\n\r\n  async getStatus(serviceName) {\r\n    const containers = await this.docker.listContainers({\r\n      all: 1\r\n    });\r\n    const container = _.find(containers, (cnt) => {\r\n      return cnt.Labels['com.docker.compose.service'] === serviceName;\r\n    });\r\n    if (container) {\r\n      return container.State;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  /**\r\n   * Get \"user:group\" of current process\r\n   *\r\n   * Window: process.getgid() and process.getuid() are not defined so this returns null\r\n   *\r\n   * @returns {null|string}\r\n   */\r\n  getUserGroup() {\r\n    if (process.getgid && process.getuid) {\r\n      return `${process.getuid()}:${process.getgid()}`;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  spawn(cmd, args, opts) {\r\n    //merge current process env with spawn cmd\r\n    const env = _.defaults({\r\n      BOX_USER: this.getUserGroup()\r\n    }, opts.env, process.env);\r\n    const ret = spawnSync(cmd, args, _.defaults({\r\n      env,\r\n      stdio: 'inherit',\r\n      shell: true,\r\n      windowsHide: true //hide terminal window on Windows\r\n    }, opts));\r\n    if (ret.status !== 0) {\r\n      console.error(ret); //XXX\r\n      throw new Error('spawn error');\r\n    }\r\n  }\r\n\r\n  get shell() {\r\n    shell.config.reset();\r\n    shell.config.silent = true;\r\n    shell.config.fatal = true;\r\n\r\n    return shell;\r\n  }\r\n}\r\n\r\nmodule.exports = DockerComposeRuntime;\r\n"]}