{"version":3,"sources":["../../../src/services/docker-compose/runtime.js"],"names":["AbstractService","Joi","require","_","shell","spawnSync","DockerComposeRuntime","constructor","docker","exec","silent","run","params","service","object","op","string","serviceName","dockerCompose","logger","log","level","msg","spawn","getUserGroup","env","containers","listContainers","all","container","find","cnt","Labels","status","undefined","State","Error","process","getuid","getgid","cmd","args","opts","defaults","BOX_USER","ret","stdio","console","error","config","reset","fatal","module","exports"],"mappings":";;;;;;;;AAAA,MAAM,EAACA,eAAD,EAAkBC,GAAlB,KAAyBC,QAAQ,sBAAR,CAA/B;AACA,MAAMC,IAAID,QAAQ,QAAR,CAAV;AACA,MAAME,QAAQF,QAAQ,SAAR,CAAd;AACA,MAAM,EAAEG,SAAF,KAAgBH,QAAQ,eAAR,CAAtB;;AAEA,MAAMI,oBAAN,SAAmCN,eAAnC,CAAmD;AACjDO,cAAYC,MAAZ,EAAoB;AAClB;;AAEA;AACA,SAAKJ,KAAL,CAAWK,IAAX,CAAgB,0BAAhB,EAA4C,EAACC,QAAQ,IAAT,EAA5C;;AAEA,SAAKF,MAAL,GAAcA,MAAd;AACD;;AAEKG,KAAN,CAAUC,MAAV,EAAkB;AAAA;;AAAA;AAChB,YAAKA,MAAL,CAAYA,MAAZ,EAAoB;AAClBC,iBAASZ,IAAIa,MAAJ,EADS;AAElBC,YAAId,IAAIe,MAAJ;AAFc,OAApB;;AAKA;AACA,YAAM,EAACH,OAAD,EAAUE,EAAV,KAAgBH,MAAtB;;AAEA,YAAMK,cAAcJ,QAAQK,aAAR,CAAsBL,OAA1C;;AAEA,cAAOE,EAAP;AACE,aAAK,SAAL;AACA,aAAK,QAAL;AACA,aAAK,OAAL;AACE,gBAAKI,MAAL,CAAYC,GAAZ,CAAgB;AACdC,mBAAO,MADO;AAEdC,iBAAM,GAAEL,WAAY,sCAAqCA,WAAY,WAAUF,EAAG;AAFpE,WAAhB;;AAKA,gBAAKQ,KAAL,CAAW,gBAAX,EAA6B,CAAC,KAAD,EAAS,UAAS,MAAKC,YAAL,EAAoB,EAAtC,EAAyC,MAAzC,EAAiDP,WAAjD,EAA8D,QAA9D,EAAwEF,EAAxE,CAA7B,EAA0G;AACxGU,iBAAKZ,QAAQY;AAD2F,WAA1G;;AAIA,gBAAKN,MAAL,CAAYC,GAAZ,CAAgB;AACdC,mBAAO,MADO;AAEdC,iBAAM,GAAEL,WAAY;AAFN,WAAhB;AAIA;AACF,aAAK,OAAL;AACE,gBAAKM,KAAL,CAAW,gBAAX,EAA6B,CAAC,IAAD,EAAO,IAAP,EAAaN,WAAb,CAA7B,EAAwD;AACtDQ,iBAAKZ,QAAQY;AADyC,WAAxD;AAGA;AACF,aAAK,MAAL;AACE,gBAAKF,KAAL,CAAW,gBAAX,EAA6B,CAAC,MAAD,EAASN,WAAT,CAA7B,EAAoD;AAClDQ,iBAAKZ,QAAQY;AADqC,WAApD;AAGA;AACF,aAAK,QAAL;AACE,gBAAMC,aAAa,MAAM,MAAKlB,MAAL,CAAYmB,cAAZ,CAA2B;AAClDC,iBAAK;AAD6C,WAA3B,CAAzB;AAGA,gBAAMC,YAAY1B,EAAE2B,IAAF,CAAOJ,UAAP,EAAmB,UAACK,GAAD,EAAS;AAC5C,mBAAOA,IAAIC,MAAJ,CAAW,4BAAX,MAA6Cf,WAApD;AACD,WAFiB,CAAlB;AAGAJ,kBAAQoB,MAAR,GAAiBC,SAAjB;AACA,cAAIL,SAAJ,EAAe;AACbhB,oBAAQoB,MAAR,GAAiBJ,UAAUM,KAA3B;AACD;AACD;AACF;AACE,gBAAM,IAAIC,KAAJ,CAAU,kDAAkDrB,EAA5D,CAAN;AAzCJ;AAXgB;AAsDjB;;AAEDS,iBAAe;AACb,WAAQ,GAAEa,QAAQC,MAAR,EAAiB,IAAGD,QAAQE,MAAR,EAAiB,EAA/C;AACD;;AAEDhB,QAAMiB,GAAN,EAAWC,IAAX,EAAiBC,IAAjB,EAAuB;AACrB;AACA,UAAMjB,MAAMtB,EAAEwC,QAAF,CAAW;AACrBC,gBAAU,KAAKpB,YAAL;AADW,KAAX,EAETkB,KAAKjB,GAFI,EAECY,QAAQZ,GAFT,CAAZ;AAGA,UAAMoB,MAAMxC,UAAUmC,GAAV,EAAeC,IAAf,EAAqBtC,EAAEwC,QAAF,CAAW;AAC1ClB,SAD0C;AAE1CqB,aAAO,SAFmC;AAG1C1C,aAAO;AAHmC,KAAX,EAI9BsC,IAJ8B,CAArB,CAAZ;AAKA,QAAIG,IAAIZ,MAAJ,KAAe,CAAnB,EAAsB;AACpBc,cAAQC,KAAR,CAAcH,GAAd,EADoB,CACA;AACpB,YAAM,IAAIT,KAAJ,CAAU,aAAV,CAAN;AACD;AACF;;AAED,MAAIhC,KAAJ,GAAY;AACVA,UAAM6C,MAAN,CAAaC,KAAb;AACA9C,UAAM6C,MAAN,CAAavC,MAAb,GAAsB,IAAtB;AACAN,UAAM6C,MAAN,CAAaE,KAAb,GAAqB,IAArB;;AAEA,WAAO/C,KAAP;AACD;AA5FgD;;AA+FnDgD,OAAOC,OAAP,GAAiB/C,oBAAjB","file":"runtime.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\nconst _ = require('lodash');\nconst shell = require('shelljs');\nconst { spawnSync } = require('child_process');\n\nclass DockerComposeRuntime extends AbstractService {\n  constructor(docker) {\n    super();\n\n    //check if docker-compose is available on local system\n    this.shell.exec('docker-compose --version', {silent: true});\n\n    this.docker = docker;\n  }\n\n  async run(params) {\n    this.params(params, {\n      service: Joi.object(),\n      op: Joi.string()\n    });\n\n    //we don't do `params = this.params(...)` as we want original reference of the service\n    const {service, op} = params;\n\n    const serviceName = service.dockerCompose.service;\n\n    switch(op) {\n      case 'install':\n      case 'update':\n      case 'reset':\n        this.logger.log({\n          level: 'info',\n          msg: `${serviceName}: RUNNING 'docker-compose run --rm ${serviceName} bb-box ${op}. The below runs on the container:`\n        });\n\n        this.spawn('docker-compose', ['run', `--user ${this.getUserGroup()}`, '--rm', serviceName, 'bb-box', op], {\n          env: service.env\n        });\n\n        this.logger.log({\n          level: 'info',\n          msg: `${serviceName}: END`\n        });\n        break;\n      case 'start':\n        this.spawn('docker-compose', ['up', '-d', serviceName], {\n          env: service.env\n        });\n        break;\n      case 'stop':\n        this.spawn('docker-compose', ['stop', serviceName], {\n          env: service.env\n        });\n        break;\n      case 'status':\n        const containers = await this.docker.listContainers({\n          all: 1\n        });\n        const container = _.find(containers, (cnt) => {\n          return cnt.Labels['com.docker.compose.service'] === serviceName;\n        });\n        service.status = undefined;\n        if (container) {\n          service.status = container.State;\n        }\n        break;\n      default:\n        throw new Error('DockerComposePlugin: Not supported operation ' + op);\n    }\n  }\n\n  getUserGroup() {\n    return `${process.getuid()}:${process.getgid()}`;\n  }\n\n  spawn(cmd, args, opts) {\n    //merge current process env with spawn cmd\n    const env = _.defaults({\n      BOX_USER: this.getUserGroup()\n    }, opts.env, process.env);\n    const ret = spawnSync(cmd, args, _.defaults({\n      env,\n      stdio: 'inherit',\n      shell: true\n    }, opts));\n    if (ret.status !== 0) {\n      console.error(ret); //XXX\n      throw new Error('spawn error');\n    }\n  }\n\n  get shell() {\n    shell.config.reset();\n    shell.config.silent = true;\n    shell.config.fatal = true;\n\n    return shell;\n  }\n}\n\nmodule.exports = DockerComposeRuntime;\n"]}