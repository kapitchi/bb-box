{"version":3,"sources":["../../../src/services/docker-compose/runtime.js"],"names":["AbstractService","Joi","require","os","_","shell","spawnSync","DockerComposeRuntime","constructor","docker","exec","silent","windowsHide","e","Error","stack","run","params","service","object","op","string","ctx","serviceName","dockerCompose","fileArgs","platformFile","platform","test","logger","log","level","msg","push","cmd","getStatus","args","userGroup","getUserGroup","each","env","val","key","sshKeysPath","spawn","status","containers","listContainers","all","container","find","cnt","Labels","State","undefined","process","getgid","getuid","opts","defaults","BOX_USER","cmdString","join","cwd","ret","stdio","console","error","config","reset","fatal","module","exports"],"mappings":"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","file":"runtime.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\nconst os = require('os');\nconst _ = require('lodash');\nconst shell = require('shelljs');\nconst { spawnSync } = require('child_process');\n\nclass DockerComposeRuntime extends AbstractService {\n  constructor(docker) {\n    super();\n\n    try {\n      //check if docker-compose is available on local system\n      this.shell.exec('docker-compose --version', {silent: true, windowsHide: true});\n    } catch (e) {\n      throw new Error('Can not use DockerComposeRuntime: ' + e.stack);\n    }\n\n    this.docker = docker;\n  }\n\n  async run(params) {\n    this.params(params, {\n      service: Joi.object(),\n      op: Joi.string(),\n      ctx: Joi.object()\n    });\n\n    //we don't do `params = this.params(...)` as we want original reference of the service\n    const {service, op, ctx} = params;\n\n    const serviceName = service.dockerCompose.service;\n\n    const fileArgs = [\n      '-f docker-compose.yml'\n    ];\n    const platformFile = `docker-compose.${os.platform()}.yml`;\n    if (this.shell.test('-f', platformFile)) {\n      this.logger.log({\n        level: 'info',\n        msg: `Using platform file: ${platformFile}`\n      });\n      fileArgs.push(`-f ${platformFile}`);\n    }\n\n    switch(op) {\n      case 'install':\n      case 'update':\n      case 'reset':\n        let cmd = 'run';\n        if (await this.getStatus(serviceName) === 'running') {\n          cmd = 'exec';\n        }\n\n        const args = [];\n        const userGroup = this.getUserGroup();\n        if (userGroup) {\n          args.push(`--user \"${userGroup}\"`);\n        }\n\n        if (cmd === 'run') {\n          args.push('--rm');\n          //TODO escape val?\n          _.each(service.env, (val, key) => {\n            args.push('-e', `${key}=\"${val}\"`);\n          });\n\n          if (ctx.sshKeysPath) {\n            //TODO this might not be even supported by the image - should be configurable at least!\n            args.push(`-v ${ctx.sshKeysPath}:/home/node/.ssh`)\n          }\n        }\n\n        this.spawn('docker-compose', [...fileArgs, cmd, ...args, serviceName, 'bbox', op, '--skip-dependencies'], {\n          env: service.env\n        });\n\n        this.logger.log({\n          level: 'info',\n          msg: `${serviceName}: END`\n        });\n        break;\n      case 'start':\n        this.spawn('docker-compose', [...fileArgs, 'up', '-d', serviceName], {\n          env: service.env\n        });\n        break;\n      case 'stop':\n        this.spawn('docker-compose', [...fileArgs, 'stop', serviceName], {\n          env: service.env\n        });\n        break;\n      case 'status':\n        service.status = await this.getStatus(serviceName);\n        break;\n      default:\n        throw new Error('DockerComposePlugin: Not supported operation ' + op);\n    }\n  }\n\n  async getStatus(serviceName) {\n    const containers = await this.docker.listContainers({\n      all: 1\n    });\n    const container = _.find(containers, (cnt) => {\n      return cnt.Labels['com.docker.compose.service'] === serviceName;\n    });\n    if (container) {\n      return container.State;\n    }\n    return undefined;\n  }\n\n  /**\n   * Get \"user:group\" of current process\n   *\n   * Window: process.getgid() and process.getuid() are not defined so this returns null\n   *\n   * @returns {null|string}\n   */\n  getUserGroup() {\n    if (process.getgid && process.getuid) {\n      return `${process.getuid()}:${process.getgid()}`;\n    }\n    return undefined;\n  }\n\n  spawn(cmd, args, opts) {\n    //merge current process env with spawn cmd\n    const env = _.defaults({}, opts.env, process.env);\n    const userGroup = this.getUserGroup();\n    if (userGroup) {\n        env.BOX_USER = userGroup;\n    }\n    const cmdString = `${cmd} ${args.join(' ')}`;\n    this.logger.log({\n      level: 'debug',\n      msg: `Executing (cwd: ${process.cwd()}): ${cmdString} `\n    });\n    const ret = spawnSync(cmd, args, {\n      env,\n      shell: true, //throws error without this\n      stdio: 'inherit'\n    });\n    if (ret.status !== 0) {\n      console.error(ret); //XXX\n      throw new Error('spawn error');\n    }\n  }\n\n  get shell() {\n    shell.config.reset();\n    shell.config.silent = true;\n    shell.config.fatal = true;\n\n    return shell;\n  }\n}\n\nmodule.exports = DockerComposeRuntime;\n"]}