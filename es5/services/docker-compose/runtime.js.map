{"version":3,"sources":["../../../src/services/docker-compose/runtime.js"],"names":["AbstractService","Joi","require","os","_","shell","spawnSync","DockerComposeRuntime","constructor","docker","exec","silent","windowsHide","e","Error","stack","run","params","service","object","op","string","serviceName","dockerCompose","fileArgs","cmd","getStatus","args","userGroup","getUserGroup","push","each","env","val","key","spawn","logger","log","level","msg","status","containers","listContainers","all","container","find","cnt","Labels","State","undefined","process","getgid","getuid","opts","defaults","BOX_USER","cmdString","join","cwd","ret","stdio","console","error","config","reset","fatal","module","exports"],"mappings":"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","file":"runtime.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\nconst os = require('os');\nconst _ = require('lodash');\nconst shell = require('shelljs');\nconst { spawnSync } = require('child_process');\n\nclass DockerComposeRuntime extends AbstractService {\n  constructor(docker) {\n    super();\n\n    try {\n      //check if docker-compose is available on local system\n      this.shell.exec('docker-compose --version', {silent: true, windowsHide: true});\n    } catch (e) {\n      throw new Error('Can not use DockerComposeRuntime: ' + e.stack);\n    }\n\n    this.docker = docker;\n  }\n\n  async run(params) {\n    this.params(params, {\n      service: Joi.object(),\n      op: Joi.string()\n    });\n\n    //we don't do `params = this.params(...)` as we want original reference of the service\n    const {service, op} = params;\n\n    const serviceName = service.dockerCompose.service;\n\n    const fileArgs = [\n      //'-f docker-compose.yml'\n    ];\n    // const platformFile = `docker-compose.${os.platform()}.yml`;\n    // if (this.shell.test('-f', platformFile)) {\n    //   this.logger.log({\n    //     level: 'info',\n    //     msg: `Using platform file: ${platformFile}`\n    //   });\n    //   fileArgs.push(`-f ${platformFile}`);\n    // }\n\n    switch(op) {\n      case 'install':\n      case 'update':\n      case 'reset':\n        let cmd = 'run';\n        if (await this.getStatus(serviceName) === 'running') {\n          cmd = 'exec';\n        }\n\n        const args = [\n          '--no-deps'\n        ];\n        const userGroup = this.getUserGroup();\n        if (userGroup) {\n          args.push(`--user \"${userGroup}\"`);\n        }\n\n        if (cmd === 'run') {\n          args.push('--rm');\n          //TODO escape val?\n          _.each(service.env, (val, key) => {\n            args.push('-e', `${key}=\"${val}\"`);\n          });\n        }\n\n        this.spawn('docker-compose', [...fileArgs, cmd, ...args, serviceName, 'bbox', op, '--skip-dependencies'], {\n          env: service.env\n        });\n\n        this.logger.log({\n          level: 'info',\n          msg: `${serviceName}: END`\n        });\n        break;\n      case 'start':\n        this.spawn('docker-compose', [...fileArgs, 'up', '-d', serviceName], {\n          env: service.env\n        });\n        break;\n      case 'stop':\n        this.spawn('docker-compose', [...fileArgs, 'stop', serviceName], {\n          env: service.env\n        });\n        break;\n      case 'status':\n        service.status = await this.getStatus(serviceName);\n        break;\n      default:\n        throw new Error('DockerComposePlugin: Not supported operation ' + op);\n    }\n  }\n\n  async getStatus(serviceName) {\n    const containers = await this.docker.listContainers({\n      all: 1\n    });\n    const container = _.find(containers, (cnt) => {\n      return cnt.Labels['com.docker.compose.service'] === serviceName;\n    });\n    if (container) {\n      return container.State;\n    }\n    return undefined;\n  }\n\n  /**\n   * Get \"user:group\" of current process\n   *\n   * Window: process.getgid() and process.getuid() are not defined so this returns null\n   *\n   * @returns {null|string}\n   */\n  getUserGroup() {\n    if (process.getgid && process.getuid) {\n      return `${process.getuid()}:${process.getgid()}`;\n    }\n    return undefined;\n  }\n\n  spawn(cmd, args, opts) {\n    //merge current process env with spawn cmd\n    const env = _.defaults({}, opts.env, process.env);\n    const userGroup = this.getUserGroup();\n    if (userGroup) {\n        env.BOX_USER = userGroup;\n    }\n    const cmdString = `${cmd} ${args.join(' ')}`;\n    this.logger.log({\n      level: 'debug',\n      msg: `Executing (cwd: ${process.cwd()}): ${cmdString} `\n    });\n    const ret = spawnSync(cmd, args, {\n      env,\n      stdio: 'inherit'\n    });\n    if (ret.status !== 0) {\n      console.error(ret); //XXX\n      throw new Error('spawn error');\n    }\n  }\n\n  get shell() {\n    shell.config.reset();\n    shell.config.silent = true;\n    shell.config.fatal = true;\n\n    return shell;\n  }\n}\n\nmodule.exports = DockerComposeRuntime;\n"]}