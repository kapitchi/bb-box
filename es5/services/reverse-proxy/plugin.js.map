{"version":3,"sources":["../../../src/services/reverse-proxy/plugin.js"],"names":["AbstractService","Joi","require","_","ReverseProxyPlugin","constructor","reverseProxyRenderer","docker","register","box","onCli","program","onInstallAfter","service","createConfigOnEnabled","onUpdateAfter","reverseProxy","createConfig","rootService","data","proxies","serviceName","services","isEmpty","expose","first","push","name","domains","listen","upstream","host","get","port","configFile","render","module","exports"],"mappings":";;;;;;;;AAAA,MAAM,EAACA,eAAD,EAAkBC,GAAlB,KAAyBC,QAAQ,sBAAR,CAA/B;AACA,MAAMC,IAAID,QAAQ,QAAR,CAAV;;AAEA,MAAME,kBAAN,SAAiCJ,eAAjC,CAAiD;AAC/CK,cAAYC,oBAAZ,EAAkCC,MAAlC,EAA0C;AACxC;AACA,SAAKD,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AACD;;AAEDC,WAASC,GAAT,EAAc,CACb;;AAEDC,QAAMC,OAAN,EAAe,CACd;;AAEKC,gBAAN,CAAqB,EAACC,OAAD,EAArB,EAAgC;AAAA;;AAAA;AAC9B,YAAM,MAAKC,qBAAL,CAA2BD,OAA3B,CAAN;AAD8B;AAE/B;;AAEKE,eAAN,CAAoB,EAACF,OAAD,EAApB,EAA+B;AAAA;;AAAA;AAC7B,YAAM,OAAKC,qBAAL,CAA2BD,OAA3B,CAAN;AAD6B;AAE9B;;AAEKC,uBAAN,CAA4BD,OAA5B,EAAqC;AAAA;;AAAA;AACnC,UAAI,CAACA,QAAQG,YAAb,EAA2B;AACzB;AACD;;AAED,YAAM,OAAKC,YAAL,CAAkBJ,OAAlB,CAAN;AALmC;AAMpC;;AAEKI,cAAN,CAAmBC,WAAnB,EAAgC;AAAA;;AAAA;AAC9B,YAAMC,OAAO;AACXC,iBAAS;AADE,OAAb;AAGA,WAAK,MAAMC,WAAX,IAA0BH,YAAYI,QAAtC,EAAgD;AAC9C,cAAMT,UAAUK,YAAYI,QAAZ,CAAqBD,WAArB,CAAhB;AACA,YAAIlB,EAAEoB,OAAF,CAAUV,QAAQW,MAAlB,CAAJ,EAA+B;AAC7B;AACD;;AAED;AACA,cAAMA,SAASrB,EAAEsB,KAAF,CAAQZ,QAAQW,MAAhB,CAAf;;AAEAL,aAAKC,OAAL,CAAaM,IAAb,CAAkB;AAChBC,gBAAMd,QAAQc,IADE;AAEhBC,mBAAS,CAAE,GAAEf,QAAQc,IAAK,QAAjB,CAFO;AAGhBE,kBAAQ,CAAC,EAAD,CAHQ;AAIhBC,oBAAU,CAAC;AACTC,kBAAM5B,EAAE6B,GAAF,CAAMR,MAAN,EAAc,MAAd,EAAsB,WAAtB,CADG;AAETS,kBAAMT,OAAOS;AAFJ,WAAD;AAJM,SAAlB;;AAUA;AACD;;AAED,YAAMC,aAAa,OAAK5B,oBAAL,CAA0B6B,MAA1B,CAAiChB,IAAjC,CAAnB;AA1B8B;AA2B/B;AAzD8C;;AA4DjDiB,OAAOC,OAAP,GAAiBjC,kBAAjB","file":"plugin.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\r\nconst _ = require('lodash');\r\n\r\nclass ReverseProxyPlugin extends AbstractService {\r\n  constructor(reverseProxyRenderer, docker) {\r\n    super();\r\n    this.reverseProxyRenderer = reverseProxyRenderer;\r\n    this.docker = docker;\r\n    //docker run -p 8080:8080 -p 80:80 --network=host -v $PWD/traefik/traefik.toml:/etc/traefik/traefik.toml -v $PWD/traefik/rules:/rules traefik\r\n  }\r\n\r\n  register(box) {\r\n  }\r\n\r\n  onCli(program) {\r\n  }\r\n\r\n  async onInstallAfter({service}) {\r\n    await this.createConfigOnEnabled(service);\r\n  }\r\n\r\n  async onUpdateAfter({service}) {\r\n    await this.createConfigOnEnabled(service);\r\n  }\r\n\r\n  async createConfigOnEnabled(service) {\r\n    if (!service.reverseProxy) {\r\n      return;\r\n    }\r\n\r\n    await this.createConfig(service);\r\n  }\r\n\r\n  async createConfig(rootService) {\r\n    const data = {\r\n      proxies: []\r\n    };\r\n    for (const serviceName in rootService.services) {\r\n      const service = rootService.services[serviceName];\r\n      if (_.isEmpty(service.expose)) {\r\n        continue;\r\n      }\r\n\r\n      //TODO we take first\r\n      const expose = _.first(service.expose);\r\n\r\n      data.proxies.push({\r\n        name: service.name,\r\n        domains: [`${service.name}.local`],\r\n        listen: [80],\r\n        upstream: [{\r\n          host: _.get(expose, 'host', 'localhost'),\r\n          port: expose.port\r\n        }]\r\n      });\r\n\r\n      //console.log(data); //XXX\r\n    }\r\n\r\n    const configFile = this.reverseProxyRenderer.render(data);\r\n  }\r\n}\r\n\r\nmodule.exports = ReverseProxyPlugin;\r\n"]}