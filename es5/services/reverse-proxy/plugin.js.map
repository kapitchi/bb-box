{"version":3,"sources":["../../../src/services/reverse-proxy/plugin.js"],"names":["AbstractService","Joi","require","_","ReverseProxyPlugin","constructor","reverseProxyRenderer","docker","register","box","onCli","program","onInstallAfter","service","createConfigOnEnabled","onUpdateAfter","console","log","reverseProxy","createConfig","rootService","data","proxies","serviceName","services","isEmpty","expose","first","push","name","domains","listen","upstream","host","get","port","configFile","render","module","exports"],"mappings":";;;;;;;;AAAA,MAAM,EAACA,eAAD,EAAkBC,GAAlB,KAAyBC,QAAQ,sBAAR,CAA/B;AACA,MAAMC,IAAID,QAAQ,QAAR,CAAV;;AAEA,MAAME,kBAAN,SAAiCJ,eAAjC,CAAiD;AAC/CK,cAAYC,oBAAZ,EAAkCC,MAAlC,EAA0C;AACxC;AACA,SAAKD,oBAAL,GAA4BA,oBAA5B;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA;AACD;;AAEDC,WAASC,GAAT,EAAc,CACb;;AAEDC,QAAMC,OAAN,EAAe,CACd;;AAEKC,gBAAN,CAAqB,EAACC,OAAD,EAArB,EAAgC;AAAA;;AAAA;AAC9B,YAAM,MAAKC,qBAAL,CAA2BD,OAA3B,CAAN;AAD8B;AAE/B;;AAEKE,eAAN,CAAoB,EAACF,OAAD,EAApB,EAA+B;AAAA;;AAAA;AAC7B,YAAM,OAAKC,qBAAL,CAA2BD,OAA3B,CAAN;AAD6B;AAE9B;;AAEKC,uBAAN,CAA4BD,OAA5B,EAAqC;AAAA;;AAAA;AACnCG,cAAQC,GAAR,CAAYJ,OAAZ,EADmC,CACb;AACtB,UAAI,CAACA,QAAQK,YAAb,EAA2B;AACzB;AACD;;AAED,YAAM,OAAKC,YAAL,CAAkBN,OAAlB,CAAN;AANmC;AAOpC;;AAEKM,cAAN,CAAmBC,WAAnB,EAAgC;AAAA;;AAAA;AAC9B,YAAMC,OAAO;AACXC,iBAAS;AADE,OAAb;AAGA,WAAK,MAAMC,WAAX,IAA0BH,YAAYI,QAAtC,EAAgD;AAC9C,cAAMX,UAAUO,YAAYI,QAAZ,CAAqBD,WAArB,CAAhB;AACA,YAAIpB,EAAEsB,OAAF,CAAUZ,QAAQa,MAAlB,CAAJ,EAA+B;AAC7B;AACD;;AAED;AACA,cAAMA,SAASvB,EAAEwB,KAAF,CAAQd,QAAQa,MAAhB,CAAf;;AAEAL,aAAKC,OAAL,CAAaM,IAAb,CAAkB;AAChBC,gBAAMhB,QAAQgB,IADE;AAEhBC,mBAAS,CAAE,GAAEjB,QAAQgB,IAAK,QAAjB,CAFO;AAGhBE,kBAAQ,CAAC,EAAD,CAHQ;AAIhBC,oBAAU,CAAC;AACTC,kBAAM9B,EAAE+B,GAAF,CAAMR,MAAN,EAAc,MAAd,EAAsB,WAAtB,CADG;AAETS,kBAAMT,OAAOS;AAFJ,WAAD;AAJM,SAAlB;;AAUA;AACD;;AAED,YAAMC,aAAa,OAAK9B,oBAAL,CAA0B+B,MAA1B,CAAiChB,IAAjC,CAAnB;AA1B8B;AA2B/B;AA1D8C;;AA6DjDiB,OAAOC,OAAP,GAAiBnC,kBAAjB","file":"plugin.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\nconst _ = require('lodash');\n\nclass ReverseProxyPlugin extends AbstractService {\n  constructor(reverseProxyRenderer, docker) {\n    super();\n    this.reverseProxyRenderer = reverseProxyRenderer;\n    this.docker = docker;\n    //docker run -p 8080:8080 -p 80:80 --network=host -v $PWD/traefik/traefik.toml:/etc/traefik/traefik.toml -v $PWD/traefik/rules:/rules traefik\n  }\n\n  register(box) {\n  }\n\n  onCli(program) {\n  }\n\n  async onInstallAfter({service}) {\n    await this.createConfigOnEnabled(service);\n  }\n\n  async onUpdateAfter({service}) {\n    await this.createConfigOnEnabled(service);\n  }\n\n  async createConfigOnEnabled(service) {\n    console.log(service); //XXX\n    if (!service.reverseProxy) {\n      return;\n    }\n\n    await this.createConfig(service);\n  }\n\n  async createConfig(rootService) {\n    const data = {\n      proxies: []\n    };\n    for (const serviceName in rootService.services) {\n      const service = rootService.services[serviceName];\n      if (_.isEmpty(service.expose)) {\n        continue;\n      }\n\n      //TODO we take first\n      const expose = _.first(service.expose);\n\n      data.proxies.push({\n        name: service.name,\n        domains: [`${service.name}.local`],\n        listen: [80],\n        upstream: [{\n          host: _.get(expose, 'host', 'localhost'),\n          port: expose.port\n        }]\n      });\n\n      //console.log(data); //XXX\n    }\n\n    const configFile = this.reverseProxyRenderer.render(data);\n  }\n}\n\nmodule.exports = ReverseProxyPlugin;\n"]}