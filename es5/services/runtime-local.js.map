{"version":3,"sources":["../../src/services/runtime-local.js"],"names":["AbstractService","Joi","require","_","shell","inquirer","blubird","pm2","promisifyAll","RuntimeLocal","constructor","onUnregister","pm2Disconnect","run","params","service","object","op","string","includes","runPm2","some","processEnv","clone","process","env","defaults","pushd","cwd","deps","isUndefined","console","log","runOperation","runMigrations","logger","level","msg","name","popd","Error","isArray","one","isFunction","createContext","isString","cmd","opts","execOpts","silent","exec","error","migrations","lastMigrationIndex","get","migIndex","parseInt","mig","migName","description","ctx","up","state","lastMigration","e","down","warn","pm2Connect","ret","startAsync","isEmpty","isObject","pm2Process","stopAsync","message","x","describeAsync","status","undefined","pm2_env","c","prompt","apply","arguments","cmdPlaceholder","template","omit","windowsHide","replace","connectAsync","disconnect","config","reset","module","exports"],"mappings":"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","file":"runtime-local.js","sourcesContent":["const {AbstractService, Joi} = require('@kapitchi/bb-service');\nconst _ = require('lodash');\nconst shell = require('shelljs');\nconst inquirer = require('inquirer');\nconst blubird = require('bluebird');\nconst pm2 = blubird.promisifyAll(require('pm2'));\n\nclass RuntimeLocal extends AbstractService {\n  constructor() {\n    super();\n    this.pm2 = null;\n  }\n\n  onUnregister() {\n    this.pm2Disconnect();\n  }\n\n  async run(params) {\n    this.params(params, {\n      service: Joi.object(),\n      op: Joi.string()\n    });\n\n    //need references not clones so we don't do `params = this.params()`\n    const {service, op} = params;\n\n    if (_.includes(['start', 'stop', 'status'], op)) {\n      return await this.runPm2(service, op);\n    }\n\n    const some = service[op];\n\n    //run sync\n    if (_.includes(['install', 'update', 'reset'], op)) {\n      const processEnv = _.clone(process.env);\n      process.env = _.defaults({}, service.env, process.env);\n\n      this.shell.pushd(service.cwd);\n\n      // We run install/update dependencies.\n      // On 'update' op, when updateDependencies is not available we default to installDependencies\n      let deps = null;\n      if (op === 'install') {\n        deps = service['installDependencies'];\n      }\n      else if (op === 'update') {\n        deps = service['updateDependencies'];\n        if (_.isUndefined(deps)) {\n          deps = service['installDependencies'];\n        }\n      }\n\n      if (deps) {\n        console.log('Running deps install/update...'); //XXX\n        await this.runOperation(service, deps);\n      }\n\n      //END\n\n      //run migrations\n      if (op === 'install' || op === 'update') {\n        await this.runMigrations(service);\n      }\n\n      //run the operation itself\n      if (_.isUndefined(some)) {\n        this.logger.log({\n          level: 'warn',\n          msg: `[${service.name}] no \"${op}\" op`\n        });\n        return;\n      }\n\n      await this.runOperation(service, some);\n\n      process.env = processEnv;\n\n      this.shell.popd();\n      return;\n    }\n\n    throw new Error(`Runtime local: Op \"${op}\" not implemented`);\n  }\n\n  async runOperation(service, some) {\n    if (_.isArray(some)) {\n      for (const one of some) {\n        await this.runOperation(service, one);\n      }\n      return;\n    }\n\n    if (_.isFunction(some)) {\n      await some(this.createContext(service));\n      return;\n    }\n\n    if (_.isString(some)) {\n      const {cmd, opts} = this.execOpts(service, some);\n      opts.silent = false;\n      this.shell.exec(cmd, opts);\n      return;\n    }\n\n    console.error(some); //XXX\n    throw new Error('Can not run operation implemented as ' + typeof some);\n  }\n\n  async runMigrations(service) {\n    if (!service.migrations) {\n      return;\n    }\n\n    const lastMigrationIndex = _.get(service, 'state.lastMigration', -1);\n\n    for (let migIndex in service.migrations) {\n      migIndex = parseInt(migIndex);\n      const mig = service.migrations[migIndex];\n      const migName = `${migIndex} ${mig.description ? '- ' + mig.description : '(no description)'}`;\n\n      if (migIndex <= lastMigrationIndex) {\n        console.log(`Skipping migration ${migName}`);\n        continue;\n      }\n\n      const ctx = this.createContext(service);\n      try {\n        console.log(`Running migration: ${migName}`);\n        await mig.up(ctx);\n        service.state.lastMigration = migIndex\n        console.log('... done'); //XXX\n      } catch(e) {\n        console.error('Migration error', e); //XXX\n        if (!mig.down) {\n          console.warn('No migration down');\n          return;\n        }\n\n        try {\n          await mig.down(ctx);\n        } catch(e) {\n          console.error('Migration down error: ', e); //XXX\n          throw e;\n        }\n      }\n    }\n  }\n\n  /**\n   * we use pm2 to start/stop processes\n   * http://pm2.keymetrics.io/docs/usage/pm2-api/\n   *\n   * @param service\n   * @param op\n   * @returns {Promise.<void>}\n   */\n  async runPm2(service, op) {\n    const pm2 = await this.pm2Connect(service);\n\n    switch (op) {\n      case 'start':\n        const some = service[op];\n        const env = _.defaults({}, service.env);\n\n        // file path to PM2 ecosystem file\n        if (_.isString(some)) {\n          this.shell.pushd(service.cwd);\n          try {\n            // const runSpec = {\n            //   name: service.name,\n            //   script: some,\n            //   cwd: service.cwd,\n            //   //interpreter: 'none',\n            //   //force: true,\n            //   env,\n            // };\n            const ret = await pm2.startAsync(some, {\n              env\n            });\n            if (_.isEmpty(ret)) {\n              throw new Error('Could not start PM2 process');\n            }\n            this.logger.log({\n              level: 'info',\n              msg: `${service.name} PM2 process started`,\n            });\n          } catch(e) {\n            console.log(e); //XXX\n            throw e;\n          }\n          this.shell.popd();\n        } else if (_.isObject(some)) {\n          const pm2Process = _.defaults({}, some, {\n            name: service.name,\n            cwd: service.cwd,\n            env,\n          });\n\n          //pm2Process.force = true;\n\n          // try {\n          //   await pm2.deleteAsync(service.name);\n          // } catch(e) {\n          //   //ignore delete errors\n          // }\n\n          try {\n            const ret = await pm2.startAsync(pm2Process);\n\n            if (_.isEmpty(ret)) {\n              throw new Error('Could not start PM2 process');\n            }\n            this.logger.log({\n              level: 'info',\n              msg: `${service.name} PM2 process started`,\n            });\n          } catch (e) {\n            console.log(e); //XXX\n            throw e;\n          }\n        } else {\n          this.logger.log({\n            level: 'info',\n            msg: `${service.name} No start op`,\n          });\n        }\n        break;\n      case 'stop':\n        try {\n          await pm2.stopAsync(service.name);\n        } catch (e) {\n          if (e.message !== 'process name not found') {\n            throw e;\n          }\n          this.logger.log({\n            level: 'warn',\n            msg: `${service.name} PM2 process does not exist`,\n          });\n        }\n        break;\n      case 'status':\n        const x = await pm2.describeAsync(service.name);\n        service.status = undefined;\n        if (!_.isEmpty(x)) {\n          service.status = x[0].pm2_env.status === 'online' ? 'running' : 'stopped';\n        }\n\n        break;\n    }\n  }\n\n  createContext(service) {\n    return {\n      name: service.name,\n      cwd: service.cwd,\n      shell: this.shell,\n      exec: (c) => {\n        const {cmd, opts} = this.execOpts(service, c);\n        return this.shell.exec(cmd, opts);\n      },\n      prompt: function() {\n        return inquirer.prompt.apply(inquirer.prompt, arguments);\n      },\n      log: console.log, //XXX\n      warn: console.warn //XXX\n    }\n  }\n\n  execOpts(service, cmd) {\n    const cmdPlaceholder = '${CMD}';\n    const template = _.get(service, 'exec.template', cmdPlaceholder);\n    const env = _.defaults({}, service.env, process.env);\n    const opts = _.defaults({}, _.omit(service.exec, 'template'), {\n      //async: true //TODO\n      silent: false,\n      windowsHide: true, //do not open terminal window on Windows\n      env\n    });\n\n    cmd = template.replace(cmdPlaceholder, cmd);\n    return {\n      cmd,\n      opts\n    }\n  }\n\n  async pm2Connect(service) {\n    if (!this.pm2) {\n      await pm2.connectAsync();\n      console.log('>>> PM2 connected'); //XXX\n      this.pm2 = pm2;\n    }\n\n    this.pm2.cwd = service.cwd;\n\n    return this.pm2;\n  }\n\n  pm2Disconnect() {\n    if (this.pm2) {\n      this.pm2.disconnect();\n      this.pm2 = null;\n    }\n  }\n\n  get shell() {\n    shell.config.reset();\n    shell.config.silent = true;\n    return shell;\n  }\n}\n\nmodule.exports = RuntimeLocal;\n"]}